<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>王旭的博客</title>
 <link href="http://sinoyster.github.io/atom.xml" rel="self"/>
 <link href="http://sinoyster.github.io"/>
 <updated>2013-04-22T22:26:57+08:00</updated>
 <id>http://sinoyster.github.io</id>
 <author>
   <name>王旭</name>
   <email>sinoyster@gmail.com</email>
 </author>

 
 <entry>
   <title>第七课 misleading line graph 误导人的线形图</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/22/l07-misleading-line-graph"/>
   <updated>2013-04-22T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/22/l07-misleading-line-graph</id>
   <content type="html">&lt;p&gt;[&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/S/E/M82IC6GQU_M83J9PESE.html&quot;&gt;第七课&lt;/a&gt;]  misleading line graph 误导人的线形图&amp;quot;&lt;/p&gt;
&lt;p&gt;线形图优势在于同一副图中表达趋势发展，如果不同的线形图进行比对建议要有相同的起始刻度和比例，否则图像会失真, 实际上可以在一幅图中画多个线图进行比较&lt;/p&gt;
&lt;p&gt;看教程中例子两幅图，Y坐标起始值不同，并且比例也差距很大&lt;/p&gt;
&lt;p&gt;我们先用R分别画出两幅图，再把两幅图放一幅图中来比较&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
#数据准备
yummy &amp;lt;- c(80, 76, 77, 72, 72, 68)
thrill &amp;lt;- c(12, 19, 19, 20, 21, 25)
duration &amp;lt;- c(2006:2011)

#第一幅图
plot(duration, yummy, type=&amp;quot;l&amp;quot;, col=&amp;quot;red&amp;quot;, ylim=c(50,100), ylab=&amp;quot;%&amp;quot;, main=&amp;quot;Precentage of People Who Prefer Yummy Cola&amp;quot;)
#第二幅图
plot(duration, thrill, type=&amp;quot;l&amp;quot;, col=&amp;quot;blue&amp;quot;, ylim=c(0,30), ylab=&amp;quot;%&amp;quot;, main=&amp;quot;Precentage of People Who Prefer Thrill Cola&amp;quot;)

#第三幅图
&amp;gt; plot(duration, yummy, type=&amp;quot;l&amp;quot;, col=&amp;quot;red&amp;quot;, ylim=c(0,100), ylab=&amp;quot;%&amp;quot;, main=&amp;quot;Precentage of People Who Prefer  Cola&amp;quot;)
&amp;gt; lines(duration, thrill, col=&amp;quot;blue&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;第一幅图：&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;/assets/image/stat/stat_r/l07_demo_misleading_f1.png&quot; src=&quot;/assets/image/stat/stat_r/l07_demo_misleading_f1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;第二幅图：&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;/assets/image/stat/stat_r/l07_demo_misleading_f2.png&quot; src=&quot;/assets/image/stat/stat_r/l07_demo_misleading_f2.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;第三幅图：&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;/assets/image/stat/stat_r/l07_demo_misleading_f3.png&quot; src=&quot;/assets/image/stat/stat_r/l07_demo_misleading_f3.png&quot; /&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第六课 bar graph 饼图</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/22/l06-bar-graph"/>
   <updated>2013-04-22T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/22/l06-bar-graph</id>
   <content type="html">&lt;p&gt;[&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/I/0/M82IC6GQU_M83J9ONI0.html&quot;&gt;第六课&lt;/a&gt;] bar graph 饼图&lt;/p&gt;
&lt;p&gt;圆饼图也称馅饼图，用扇形的面积，也就是圆心角的度数来表示数量。圆饼图主要用来表示组数不多的品质资料或间断性数量资料的内部构成，且各部份百分比之和必须是100%。圆饼图可以使企业根据圆中各个扇形面积的大小，判断某一部分在总体中所占比例的多少。&lt;/p&gt;
&lt;p&gt;下面就是一个饼图的例子：&lt;/p&gt;
&lt;img alt=&quot;http://wiki.mbalib.com/w/images/a/a5/%E5%9C%86%E9%A5%BC%E5%9B%BE.jpg&quot; src=&quot;http://wiki.mbalib.com/w/images/a/a5/%E5%9C%86%E9%A5%BC%E5%9B%BE.jpg&quot; /&gt;
&lt;p&gt;R中画饼图很简单，用pie就可以完成，具体的语法参考help(pie)&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
ticket_sales&amp;lt;- c(18, 10 , 7, 5, 5, 3 ,3 ,9 , 7, 8, 13, 12)
ml &amp;lt;- c(&amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;,
         &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;)
pie(ticket_sales, col=rainbow(length(ticket_sales)), labels= ml)
&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;/assets/image/stat/stat_r/l06_demo_pie.png&quot; src=&quot;/assets/image/stat/stat_r/l06_demo_pie.png&quot; /&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第五课 line graph 线形图</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/19/l05-line-graph"/>
   <updated>2013-04-19T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/19/l05-line-graph</id>
   <content type="html">&lt;p&gt;[&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/R/I/M82IC6GQU_M83J9N7RI.html&quot;&gt;第五课&lt;/a&gt;] line graph 线形图&lt;/p&gt;
&lt;p&gt;线形图又称为“点状图”(point chart)、“停顿图”(Stopping chart)或“星状图”(star chart)。这是衔接收盘价而形成的图形，也是最早的绘图方法。线形图属于图表分析的一类，仅记录收盘价，至於开盘价、当日最高价、当日最高的变动及波动幅度则欠缺。以线形图捕捉长期趋势还可以，但却难于捕捉短线和中线趋势，目前已较少有人使用。&lt;/p&gt;
&lt;p&gt;线形图一般为坐标图，横坐标轴表示所定的股价频率即交易时间，如果预测短期趋势，则以日、周为时间单位；中期趋势则以月、季为时间单位长期趋势则以年为时间单位。纵坐标轴表示股价，个股图一般运用收盘价；大势图则采用股价平均数和股价指数。&lt;/p&gt;
&lt;img alt=&quot;http://wiki.mbalib.com/w/images/5/5c/%E7%BA%BF%E5%BD%A2%E5%9B%BE.gif&quot; src=&quot;http://wiki.mbalib.com/w/images/5/5c/%E7%BA%BF%E5%BD%A2%E5%9B%BE.gif&quot; /&gt;
&lt;p&gt;R 中线形图用plot来画，下面看看视频的例子是如何画出来的:&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
p &amp;lt;- c(10, 11, 10, 12, 12.5, 12, 13.5, 13.9, 16.8, 15.2, 16, 16.5)
ml &amp;lt;-  c(&amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;,
         &amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;)
plot(c(1:12), p, ylim=c(0,18), axes=F, type=&amp;quot;l&amp;quot;, col=&amp;quot;blue&amp;quot;,
     main=&amp;quot;Price of Stock Share, July 2012-June 2011&amp;quot;, ylab=&amp;quot;Price($)&amp;quot;)
axis(1, at=1:12, lab=ml)
axis(2, las=1, at=seq(2,18,2))
box()
&lt;/pre&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;/assets/image/stat/stat_r/l05_demo_line_graph.png&quot; src=&quot;/assets/image/stat/stat_r/l05_demo_line_graph.png&quot; /&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第四课 bar graph 直方图</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/15/l04-bar-gragh"/>
   <updated>2013-04-15T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/15/l04-bar-gragh</id>
   <content type="html">&lt;p&gt;[&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/T/P/M82IC6GQU_M83J9NRTP.html&quot;&gt;第四课&lt;/a&gt;] bar graph 直方图&lt;/p&gt;
&lt;p&gt;直方图又称质量分布图，是一种几何形图表，它是根据从生产过程中收集来的质量数据分布情况，画成以组距为底边、以频数为高度的一系列连接起来的直方型矩形图，如下图所示。&lt;/p&gt;
&lt;div class=&quot;figure&quot; id=&quot;fig-01&quot;&gt;
&lt;img alt=&quot;http://wiki.mbalib.com/w/images/c/c7/%E7%9B%B4%E6%96%B9%E5%9B%BE.gif&quot; src=&quot;http://wiki.mbalib.com/w/images/c/c7/%E7%9B%B4%E6%96%B9%E5%9B%BE.gif&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;作直方图的目的就是通过观察图的形状，判断生产过程是否稳定，预测生产过程的质量。具体来说，作直方图的目的有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;显示数据的波动状态，判断一批已加工完毕的产品；&lt;/li&gt;
&lt;li&gt;直观地传达有关过程情况的信息，例如验证工序的稳定性；&lt;/li&gt;
&lt;li&gt;为计算工序能力搜集有关数据。&lt;/li&gt;
&lt;li&gt;决定在何处集中力量进行改进；&lt;/li&gt;
&lt;li&gt;观察数据真伪，用以制定规格界限；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;dl class=&quot;docutils&quot;&gt;
&lt;dt&gt;直方图的优缺点:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class=&quot;first last simple&quot;&gt;
&lt;li&gt;直方图的优点:任何情况都能使用直方图。&lt;/li&gt;
&lt;li&gt;直方图的不足:会有信息丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;R中直方图的作图&lt;/p&gt;
&lt;p&gt;数据准备：
l04.data:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
exam Jansmine Jeff Nevin Alejandra Marta
midterm 73 87 83 82 96
final 78 85 88 95 91
&lt;/pre&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
&amp;gt; d &amp;lt;- read.table(&amp;quot;l04.data&amp;quot;, header=TRUE, sep=&amp;quot; &amp;quot;) #输入文件，用空格分隔
&amp;gt; barplot(as.matrix(d[,2:6]),      #指定第2列到第6列的数据
          beside=T,          #并排显示，搞不懂的把参数去了对比一下就知道了
          col=c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;),    #指定颜色
          legend=d$exam,           #指定legend
          border=&amp;quot;white&amp;quot;,
          xlim=c(0,18), ylim=c(0,100), #设定x、y轴的范围
          args.legend = list(x=&amp;quot;right&amp;quot;), #legend的位置
          ylab=&amp;quot;Score(%)&amp;quot;)              #y轴的label
&amp;gt; title(main=&amp;quot;Scores on Midterm and Final Exams&amp;quot;) #设定title
&lt;/pre&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;/assets/image/stat/stat_r/l04_demo_barplot.png&quot; src=&quot;/assets/image/stat/stat_r/l04_demo_barplot.png&quot; /&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL文本导入小结</title>
   <link href="http://sinoyster.github.io/blog/database/2013/04/14/mysql-import-csv"/>
   <updated>2013-04-14T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/database/2013/04/14/mysql-import-csv</id>
   <content type="html">&lt;p&gt;对一个数据人来说，mysql是数据分析的利器，本文总结几种常用数据导入问题的解决办法&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;1.命令&lt;/h2&gt;
&lt;p&gt;MySQL 文档copy来的语法, 是不是很头大， 直接调几条带注释的来看吧&lt;/p&gt;
&lt;pre class=&quot;code mysql literal-block&quot;&gt;
&lt;span class=&quot;keyword&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;LOW_PRIORITY&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;CONCURRENT&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;comment single&quot;&gt;#标识是从服务器端还是客户端的文件系统进行数据导入
&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;INFILE&lt;/span&gt; &lt;span class=&quot;literal string single&quot;&gt;'file_name'&lt;/span&gt;   &lt;span class=&quot;comment single&quot;&gt;#指定导入文件
&lt;/span&gt;    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IGNORE&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;comment single&quot;&gt;#重复情况是覆盖还是忽略
&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;tbl_name&lt;/span&gt;  &lt;span class=&quot;comment single&quot;&gt;#导入的表名
&lt;/span&gt;    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword type&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;charset_name&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;comment single&quot;&gt;#导入文件的字符集
&lt;/span&gt;    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;FIELDS&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;COLUMNS&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;comment single&quot;&gt;#描述每个导入字段的属性
&lt;/span&gt;        &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;TERMINATED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;literal string single&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;             &lt;span class=&quot;comment single&quot;&gt;#指字段定分隔符
&lt;/span&gt;        &lt;span class=&quot;punctuation&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;OPTIONALLY&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ENCLOSED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;literal string single&quot;&gt;'char'&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;comment single&quot;&gt;#字段包围符号
&lt;/span&gt;        &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;ESCAPED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;literal string single&quot;&gt;'char'&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;LINES&lt;/span&gt;               &lt;span class=&quot;comment single&quot;&gt;#行属性描述
&lt;/span&gt;        &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;STARTING&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;literal string single&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;comment single&quot;&gt;#行起始字符
&lt;/span&gt;        &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;TERMINATED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;literal string single&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;comment single&quot;&gt;#行分割 unix: \n  ;  windows: \r\n
&lt;/span&gt;    &lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;IGNORE&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LINES&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;comment single&quot;&gt;#跳过前几行
&lt;/span&gt;    &lt;span class=&quot;punctuation&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;col_name_or_user_var&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,...)]&lt;/span&gt;    &lt;span class=&quot;comment single&quot;&gt;#指定文本域与表的映射，
&lt;/span&gt;                                    &lt;span class=&quot;comment single&quot;&gt;#可以直接映射到表字段，
&lt;/span&gt;                                    &lt;span class=&quot;comment single&quot;&gt;#也可以映射到某变量,
&lt;/span&gt;                                    &lt;span class=&quot;comment single&quot;&gt;#映射为变量转换后再赋给表字段
&lt;/span&gt;    &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword type&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;col_name&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;name&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,...]&lt;/span&gt;       &lt;span class=&quot;comment single&quot;&gt;#对导入映射的变量进行加工处理，
&lt;/span&gt;                                    &lt;span class=&quot;comment single&quot;&gt;#最后映射到字段上&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;从下面的几个案例来看Load DATA infile 是如何使用的.
假定:在没有特殊说明的情况下，案例中的数据库和导入文本都是 &lt;strong&gt;utf8&lt;/strong&gt; 编码,在windows下实验保存
注：在启动mysql命令时候要指定 &lt;strong&gt;--local-infile&lt;/strong&gt; 否则 LOAD DATA 中的LOCAL不会生效&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;auto-increment&quot;&gt;
&lt;h2&gt;2.AUTO_INCREMENT字段&lt;/h2&gt;
&lt;p&gt;大多数表都会有个自增的id(AUTO_INCREMENT)字段作为主键，导入时候需要自动生成,
我们在通过sql插入这种类型的字段时，赋值为null就可以自动生成自增的主键,
导入的时候我们也可以如法炮制。&lt;/p&gt;
&lt;p&gt;假定有如下表和导入数据:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
CREATE TABLE imp_null (
  id INT NOT NULL AUTO_INCREMENT ,
  name   VARCHAR(16) ,
  addr   VARCHAR(64) ,
  PRIMARY KEY(id)
);
&lt;/pre&gt;
&lt;p&gt;数据文件：imp_null.txt:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
张三,地址一
李四,地址二
王五,地址三
赵六,地址四
&lt;/pre&gt;
&lt;p&gt;导入命令:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
LOAD DATA LOCAL INFILE 'imp_null.txt'
INTO TABLE imp_null
FIELDS TERMINATED BY ','  #字段之间是','分隔
LINES TERMINATED BY '\n'  #根据你的系统选择,windows是'\r\n'; unix是'\n'
(name, addr)              #数据文件的字段顺序,以及对应的表映射字段
SET id=NULL;              #指定每个导入的id为NULL，数据库自动生成
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;3.跳过指定列&lt;/h2&gt;
&lt;p&gt;跳过指定列很简单，只需要把文件映射到变量上，而不是表字段上即可&lt;/p&gt;
&lt;p&gt;假定有如下表和导入数据:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
CREATE TABLE imp_skip (
  name   VARCHAR(16) ,
  addr   VARCHAR(64)
);
&lt;/pre&gt;
&lt;p&gt;数据文件：imp_skip.txt:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
张三,字段2,地址一,字段4
李四,字段2,地址二,字段4
王五,字段2,地址三,字段4
赵六,字段2,地址四,字段4
&lt;/pre&gt;
&lt;p&gt;导入命令:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
LOAD DATA LOCAL INFILE 'imp_skip.txt'
INTO TABLE imp_skip
FIELDS TERMINATED BY ','  #字段之间是','分隔
LINES TERMINATED BY '\n'  #根据你的系统选择,windows是'\r\n'; unix是'\n'
(name,&amp;#64;f1,addr,&amp;#64;f2)       #直接把字段数据映射到变量上，
                          #变量是用&amp;#64;开头,对变量不做处理,就跳过相应的字段了
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;4.日期处理&lt;/h2&gt;
&lt;p&gt;MySQL中导入的日期日期字符串格式固定是YYYY-MM-DD,如果不是这种格式就得做转换， 解决的思路就是把文本中的字符串先保存在变量中再把变量转换成日期格式&lt;/p&gt;
&lt;p&gt;假定有如下表和导入数据:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
CREATE TABLE imp_date (
  name   VARCHAR(16) ,
  bday   DATE
);
&lt;/pre&gt;
&lt;p&gt;数据文件：imp_date.txt:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
张三,12/22/1981
李四,05/15/1980
王五,06/04/1989
赵六,09/28/1990
&lt;/pre&gt;
&lt;p&gt;导入命令:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
LOAD DATA LOCAL INFILE 'imp_date.txt'
INTO TABLE imp_date
FIELDS TERMINATED BY ','  #字段之间是','分隔
LINES TERMINATED BY '\n'  #根据你的系统选择,windows是'\r\n'; unix是'\n'
(name,&amp;#64;bday)              #把日期字段先映射到变量上，
SET bday = STR_TO_DATE(&amp;#64;bday, '%m/%d/%Y');
                          #通过转换函数把字符串转换成日期格式
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h2&gt;5.中文处理&lt;/h2&gt;
&lt;p&gt;对于linux，系统和数据库默认都是utf8编码，一般导入导出都没有太大问题。
而对于中文windows系统默认的文本文件采用的是GBK编码, 需要在导入的时候指定:
&lt;strong&gt;character set gbk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建议编码的问题还是通过iconv命令来处理, 一是数据库不一定支持指定编码，二是有编码错误会导致导入失败&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id5&quot;&gt;
&lt;h2&gt;6.金额处理&lt;/h2&gt;
&lt;p&gt;对于很多电子表格导出的金额数据会包含&lt;strong&gt;','&lt;/strong&gt;号,如：'123,456.00', 导入的时候需要把','去掉，注意在导出文本的时候不要选择','分隔&lt;/p&gt;
&lt;p&gt;假定有如下表和导入数据:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
CREATE TABLE imp_curr (
  name   VARCHAR(16) ,
  amount DECIMAL(13,2)
);
&lt;/pre&gt;
&lt;p&gt;数据文件(\t分隔)：imp_curr.txt:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
张三   123,456.89
李四   123,456.89
王五   123,456.89
赵六   123,456.89
&lt;/pre&gt;
&lt;p&gt;导入命令:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
LOAD DATA LOCAL INFILE 'imp_curr.txt'
INTO TABLE imp_curr
FIELDS TERMINATED BY '\t'
LINES TERMINATED BY '\n'  #根据你的系统选择,windows是'\r\n'; unix是'\n'
(name,&amp;#64;amount)            #直接把字段数据映射到变量上，
SET amount=REPLACE(&amp;#64;amount,',','')
                          #通过REPLACE直接替换','号
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id6&quot;&gt;
&lt;h2&gt;$.其他&lt;/h2&gt;
&lt;p&gt;跳过开头几行:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
IGNORE 1 LINES           #跳过第一行
&lt;/pre&gt;
&lt;p&gt;总的来说不建议在导入阶段做过于复杂的转换，建议在导入之前对数据先进行预处理，所以awk、python也需要了解一些&lt;/p&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第三课 pictograph</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/14/l03-pictograph"/>
   <updated>2013-04-14T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/14/l03-pictograph</id>
   <content type="html">&lt;p&gt;[&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/A/C/M82IC6GQU_M83J9K2AC.html&quot;&gt;第三课&lt;/a&gt;] pictograph 象形统计图表&lt;/p&gt;
&lt;p&gt;俗话说一图胜千言，把复杂的数字用直观的数据可视化方法展示出来是一个优秀的数据分析师的基本要求。&lt;/p&gt;
&lt;p&gt;那么何为美？从Beautiful Visualization的观点来看，一个称得上&amp;quot;美&amp;quot;的可视效果，它不但必须美观，而且也必须新颖、翔实和高效。这方面感兴趣的可以参考一下BV&lt;/p&gt;
&lt;p&gt;做为传统的统计学来讲，数据可视化还是以传统的视图为主
本节课主要介绍了一种象形的图表方法论。下面先简单介绍一下R的绘图，在后面几节课中会详细展开讲。
R提供非常 多样的绘图 功能。如想了解，可以输入:&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
&amp;gt; demo(graphics)
&amp;gt; demo(persp)
&lt;/pre&gt;
&lt;p&gt;R中基本的绘图主要有一下几种&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;1.散点图&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;在坐标系中直观的显示样本数据分布;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;主要以2、3维样本数据为主，更高的维度可以通过辅助的方法标示
如，颜色、灰度、文字、形状等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;R中散点图用plot, line等函数来实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class=&quot;first docutils&quot;&gt;
&lt;dt&gt;R中的作图函数分高水平作图函数和低水平作图函数&lt;/dt&gt;
&lt;dd&gt;&lt;ul class=&quot;first last simple&quot;&gt;
&lt;li&gt;高水平作图函数:可以独立绘图,例如plot()&lt;/li&gt;
&lt;li&gt;低水平作图函数:必须先运行高水平作图函数绘图,
然后再加画在已有的图上面，如line()函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;2.柱状图&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;由一系列高度不等的纵向条纹或线段表示数据分布的情况。&lt;/li&gt;
&lt;li&gt;一般用横轴表示数据类型，纵轴表示分布情况, 也有横向图&lt;/li&gt;
&lt;li&gt;用barplot()函数来画&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h2&gt;3.饼图&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id5&quot;&gt;
&lt;h2&gt;4.茎叶图&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id6&quot;&gt;
&lt;h2&gt;5.盒虚图&lt;/h2&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第二课 range midrange</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/13/l02-range-midrange"/>
   <updated>2013-04-13T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/13/l02-range-midrange</id>
   <content type="html">&lt;p&gt;[&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/6/0/M82IC6GQU_M83J9IK60.html&quot;&gt;第二课&lt;/a&gt;] 极差(range), 中程数(midrange)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;range&quot;&gt;
&lt;h2&gt;1.range 极差&lt;/h2&gt;
&lt;p&gt;级差（range）：最大数减去最小数。数字越小级差越小。它描述这些数字分开的有多远, 差值越小，数据分布得越紧密&lt;/p&gt;
&lt;p&gt;R中range用于生成向量，像这种最大减最少用下面的方法就可以实现&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
max(x)-min(x)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;midrange&quot;&gt;
&lt;h2&gt;2.midrange 中程数&lt;/h2&gt;
&lt;p&gt;中程数(midrange): 中程数是指数据集中最大数和最小数的平均值，是考虑集中趋势的又一种方式，是考虑中间值的有一种方法&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
(max(x) + min(x))/2
&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>快速搭建 Jekyll Blog (一)</title>
   <link href="http://sinoyster.github.io/blog/github/2013/04/13/hosted-jekyll-blog-1"/>
   <updated>2013-04-13T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/github/2013/04/13/hosted-jekyll-blog-1</id>
   <content type="html">&lt;p&gt;Jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，可以部署到github上面作为pages。并且github可以配合许多第三方服务,例如评论服务disqus、分享服务jiathis提供完整的blog服务。下面我们一步一步看Jekyll是如何简单的搭建博客的&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;repository&quot;&gt;
&lt;h2&gt;1.建立新库(Repository)&lt;/h2&gt;
&lt;p&gt;首先当然是得有github的账户，并建立一个新的库(Repository), 新库必须按照 &lt;strong&gt;USERNAME.github.com&lt;/strong&gt; 命名。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;jekyll-bootstrap&quot;&gt;
&lt;h2&gt;2.安装 Jekyll-Bootstrap&lt;/h2&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com
$ cd USERNAME.github.com
$ git remote set-url origin git&amp;#64;github.com:USERNAME/USERNAME.github.com.git
$ git push origin master
&lt;/pre&gt;
&lt;p&gt;记得把USERNAME换成你的用户名，在push过程中也许会让你提供你ssh的公钥 rsa_id.pub&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;jekyll&quot;&gt;
&lt;h2&gt;3.本地运行 Jekyll&lt;/h2&gt;
&lt;p&gt;先安装Jekyll:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ gem install jekyll
&lt;/pre&gt;
&lt;p&gt;如果有任何问题，可以参考 Jekyll 安装文档(If you run into a problem please consult the original Jekyll installation documentation)。
安装完成就可以在本地运行jekyll了&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ cd USERNAME.github.com
$ jekyll --server # 记得把 USERNAME 改为你github的用户名
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;4.发布第一篇博客&lt;/h2&gt;
&lt;p&gt;可以通过rake 任务轻松发布博客&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ rake post title=&amp;quot;Hello World&amp;quot;
&lt;/pre&gt;
&lt;p&gt;在_post目录下会生成一个md文件，对文件进行简单编辑
现在在浏览器打入 localhost:4000 是不是就可以看到一个运行的博客了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;github&quot;&gt;
&lt;h2&gt;5.提交到github&lt;/h2&gt;
&lt;p&gt;通过简单的git命令就可以把变更提交到github&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ git add .
$ git commit -m &amp;quot;Add new content&amp;quot;
$ git push origin master
&lt;/pre&gt;
&lt;p&gt;现在通过USERNAME.github.io 就可以测试刚才的博客了&lt;/p&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>你好,ReST Test！</title>
   <link href="http://sinoyster.github.io/blog/github/2013/04/12/rest-test"/>
   <updated>2013-04-12T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/github/2013/04/12/rest-test</id>
   <content type="html">&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;第一节&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python  is  an  interpreted,  interactive, object-oriented programming language that combines remarkable power with very clear syntax.
For an introduction to programming in Python you are referred to the Python Tutorial.  The Python Library Reference documents built-in
and  standard types, constants, functions and modules.  Finally, the Python Reference Manual describes the syntax and semantics of the
core language in (perhaps too) much detail.  (These documents may be located via the INTERNET RESOURCES below; they may  be  installed
on your system as well.)&lt;/p&gt;
&lt;p&gt;Python's  basic  power  can  be  extended  with your own modules written in C or C++.  On most systems such modules may be dynamically
loaded.  Python is also adaptable as an extension language for existing applications.  See the internal documentation for hints.&lt;/p&gt;
&lt;p&gt;Documentation for installed Python modules and packages can be viewed by running the pydoc program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;第二节&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Ruby is an interpreted scripting language for quick and easy object-oriented programming.  It has many features to process text files
and to do system management tasks (as in Perl).  It is simple, straight-forward, and extensible.&lt;/p&gt;
&lt;p&gt;If you want a language for easy object-oriented programming, or you don't like the Perl ugliness, or you do like the concept of LISP,
but don't like too many parentheses, Ruby might be your language of choice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第一课 mean median mode</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/11/l01-mean-median-mode"/>
   <updated>2013-04-11T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/11/l01-mean-median-mode</id>
   <content type="html">&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/movie/2011/6/6/0/M82IC6GQU_M83J9IK60.html&quot;&gt;第一课&lt;/a&gt;  mean median 和 mode&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;mean&quot;&gt;
&lt;h2&gt;1.mean 算术平均数&lt;/h2&gt;
&lt;p&gt;算术平均，就是累计求和除以个数&lt;/p&gt;
&lt;p&gt;R中用mean计算&lt;/p&gt;
&lt;p&gt;用法:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
mean(x, ...)
## Default S3 method:
mean(x, trim = 0, na.rm = FALSE, ...)

trim： 一个0到0.5的因子，用于清除样本中偏离比例, 修剪值超出该范围的定为最接近的端点。
     通常用于去掉一些误差数据。注意，数据会在两端同时去掉
     the fraction (0 to 0.5) of observations to be trimmed from
     **each end** of ‘x’ before the mean is computed.  Values of trim
     outside that range are taken as the nearest endpoint.


na.rm: 一个逻辑值，表明NA值是否会清除不参与计算
     a logical value indicating whether ‘NA’ values should be
     stripped before the computation proceeds.
&lt;/pre&gt;
&lt;p&gt;trim例子:&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
&amp;gt; x=sort(rnorm(100,10,2))
&amp;gt; mean(x)
[1] 10.18032
&amp;gt;
&amp;gt; c(mean(x[11:90]),mean(x,trim=.1))
&amp;gt; [1] 10.20156 10.20156
&amp;gt;
&amp;gt; c(mean(x[21:80]),mean(x,trim=.2))
&amp;gt; [1] 10.24533 10.24533
&amp;gt;
&amp;gt;
&amp;gt; x &amp;lt;- c(1:3,6)
&amp;gt; mean(x)
[1] 3

&amp;gt; mean(x,0.25)
[1] 2.5
#实际上去掉了头和尾1和6两个数
&amp;gt; mean(c(1:100,Na))
[1] Na
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;median&quot;&gt;
&lt;h2&gt;2.median 中位数&lt;/h2&gt;
&lt;p&gt;如果数量为偶数，取中间两个数的平均值; 数量为奇数就是中间数字的值&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
&amp;gt; median(c(1:4),10)
[1] 2.5
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;mode&quot;&gt;
&lt;h2&gt;3.mode 众数&lt;/h2&gt;
&lt;p&gt;众数：出现频率最多的数字&lt;/p&gt;
&lt;p&gt;R中没有直接实现众数的函数，另外R中的mode也有另外的含义，不过可以用变通的方法实现&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
which.max(table(x))
&lt;/pre&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;
&amp;gt; x1 &amp;lt;- c(1:10,3)
&amp;gt; x1
 [1]  1  2  3  4  5  6  7  8  9 10  3
&amp;gt; which.max(table(x1))
3
3
&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>第零课 统计学入门和R实践</title>
   <link href="http://sinoyster.github.io/blog/stat/2013/04/10/l00-stat-and-r"/>
   <updated>2013-04-10T00:00:00+08:00</updated>
   <id>http://sinoyster.github.io/blog/stat/2013/04/10/l00-stat-and-r</id>
   <content type="html">&lt;blockquote&gt;
统计学是数据分析的基础，国内的大部分概率统计教程过于偏重理论、推导，很少涉及实际的案例应用。所以选定可汗学院的&lt;a class=&quot;reference external&quot; href=&quot;http://v.163.com/special/Khan/khstatistics.html&quot;&gt;统计学&lt;/a&gt;作为入门并配合统计软件&lt;a class=&quot;reference external&quot; href=&quot;http://www.r-project.org/&quot;&gt;R&lt;/a&gt;进行实践。&lt;/blockquote&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;R简介&lt;/h2&gt;
&lt;blockquote&gt;
R 是一套开源的统计绘图语言, 从S统计语言演变而来， 可以看做S的“方言”, 由于R的开放性，所有又很多领域的统计资源：目前在R网站上约有2400个程序包，涵盖了基础统计学、社会学、经济学、生态学、空间分析、系统发育分析、生物信息学等诸多方面。同时R也是跨平台的，可以在Winodws，Mac，Linux上运行。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h2&gt;R常用帮助&lt;/h2&gt;
&lt;p&gt;help显示帮助文档&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
&amp;gt; help(mean)
&lt;/pre&gt;
&lt;p&gt;args显示函数的参数&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
&amp;gt; args(mean)
function (x, ...)
NULL
&lt;/pre&gt;
&lt;p&gt;用.default显示函数的默认实现&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
&amp;gt; mean.default
function (x, trim = 0, na.rm = FALSE, ...)
{
    if (!is.numeric(x) &amp;amp;&amp;amp; !is.complex(x) &amp;amp;&amp;amp; !is.logical(x)) {
        warning(&amp;quot;argument is not numeric or logical: returning NA&amp;quot;)
        return(NA_real_)
    }
    if (na.rm)
        x &amp;lt;- x[!is.na(x)]
    if (!is.numeric(trim) || length(trim) != 1L)
        stop(&amp;quot;'trim' must be numeric of length one&amp;quot;)
    n &amp;lt;- length(x)
    if (trim &amp;gt; 0 &amp;amp;&amp;amp; n) {
        if (is.complex(x))
            stop(&amp;quot;trimmed means are not defined for complex data&amp;quot;)
        if (any(is.na(x)))
            return(NA_real_)
        if (trim &amp;gt;= 0.5)
            return(stats::median(x, na.rm = FALSE))
        lo &amp;lt;- floor(n * trim) + 1
        hi &amp;lt;- n + 1 - lo
        x &amp;lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
    }
    .Internal(mean(x))
}
&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 
</feed>